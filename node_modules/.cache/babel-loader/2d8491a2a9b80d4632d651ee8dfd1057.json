{"ast":null,"code":"var _jsxFileName = \"/Users/dmendoza/Documents/react-projects/study-cards/src/components/NewCardPopUp.js\";\nimport React from 'react';\n\nconst NewCardPopUp = ({\n  togglePopUp,\n  cards,\n  card,\n  setNewCard,\n  setCardsList,\n  emptyFieldError,\n  setEmptyFieldError\n}) => {\n  const handleToggle = e => {\n    togglePopUp();\n  };\n\n  const submitNewCard = e => {\n    e.preventDefault();\n\n    if (card.front && card.back) {\n      const cardsPile = [...cards, card];\n      setCardsList(cardsPile);\n      setNewCard({\n        front: '',\n        back: ''\n      });\n      handleToggle();\n      setEmptyFieldError(false);\n    } else {\n      setEmptyFieldError(true);\n    }\n  };\n\n  const handleInputChange = e => {\n    e.preventDefault();\n    const cardCopy = Object.assign({}, card);\n    const propertyName = e.target.name;\n    cardCopy[propertyName] = e.target.value;\n    setNewCard(cardCopy);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"popup-overlay\",\n    onClick: handleToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    className: \"new-card-component\",\n    onSubmit: submitNewCard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"close-popup\",\n    onClick: handleToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"X\"), React.createElement(\"label\", {\n    htmlFor: \"card-front\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"What would you like the front of the card to display?\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"front\",\n    onChange: handleInputChange,\n    id: \"card-front\",\n    value: card.front,\n    className: \"input-new-card\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"card-front\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"What would you like the back of the card to display?\"), React.createElement(\"textarea\", {\n    id: \"card-back\",\n    onChange: handleInputChange,\n    name: \"back\",\n    value: card.back,\n    className: \"input-new-card\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \" \"), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Add Card\",\n    className: \"add-card-btn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), emptyFieldError ? React.createElement(\"span\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Please make sure to fill out both fields!\") : ''));\n};\n\nexport default NewCardPopUp;","map":{"version":3,"sources":["/Users/dmendoza/Documents/react-projects/study-cards/src/components/NewCardPopUp.js"],"names":["React","NewCardPopUp","togglePopUp","cards","card","setNewCard","setCardsList","emptyFieldError","setEmptyFieldError","handleToggle","e","submitNewCard","preventDefault","front","back","cardsPile","handleInputChange","cardCopy","Object","assign","propertyName","target","name","value"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst NewCardPopUp = ({togglePopUp, cards, card, setNewCard, setCardsList, emptyFieldError, setEmptyFieldError}) => {\n\n  const handleToggle = e => {\n    togglePopUp();\n  }\n\n  const submitNewCard = e => {\n    e.preventDefault();\n    if(card.front && card.back) {\n      const cardsPile = [...cards, card];\n      setCardsList(cardsPile);\n      setNewCard({ front: '', back: ''});\n      handleToggle();\n      setEmptyFieldError(false);\n    } else {\n      setEmptyFieldError(true);\n    }\n  }\n\n  const handleInputChange = e => {\n    e.preventDefault();\n    const cardCopy = Object.assign({}, card);\n    const propertyName = e.target.name;\n    cardCopy[propertyName] = e.target.value;\n    setNewCard(cardCopy);\n  }\n\n  return (\n      <div>\n        <div className=\"popup-overlay\" onClick={handleToggle}>\n        </div>\n        <form className=\"new-card-component\" onSubmit={submitNewCard}>\n          <div className=\"close-popup\" onClick={handleToggle}>X</div>\n          <label htmlFor=\"card-front\">What would you like the front of the card to display?</label>\n          <input type=\"text\" name=\"front\" onChange={handleInputChange} id=\"card-front\" value={card.front} className=\"input-new-card\" />\n          <label htmlFor=\"card-front\">What would you like the back of the card to display?</label>\n          <textarea id=\"card-back\" onChange={handleInputChange} name=\"back\" value={card.back} className=\"input-new-card\"> </textarea>\n          <input type=\"submit\" value=\"Add Card\" className=\"add-card-btn\" />\n          {emptyFieldError ? <span className=\"error\">Please make sure to fill out both fields!</span> : ''}\n        </form>\n      </div>\n  )\n}\n\nexport default NewCardPopUp;\n"]},"metadata":{},"sourceType":"module"}