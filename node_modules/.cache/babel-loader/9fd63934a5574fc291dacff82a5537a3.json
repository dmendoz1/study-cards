{"ast":null,"code":"import _slicedToArray from \"/Users/dmendoza/Documents/react-projects/study-cards/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/dmendoza/Documents/react-projects/study-cards/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport Card from './components/Card';\nimport NewCardPopUp from './components/NewCardPopUp';\n\nfunction App() {\n  let myLocalStorageItems = JSON.parse(localStorage.getItem(\"myCardsLocalStorage\"));\n\n  const _useState = useState(myLocalStorageItems || []),\n        _useState2 = _slicedToArray(_useState, 2),\n        cards = _useState2[0],\n        setCardsList = _useState2[1];\n\n  const _useState3 = useState({\n    front: '',\n    back: ''\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        card = _useState4[0],\n        setNewCard = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        popUp = _useState6[0],\n        showPopUp = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        emptyFieldError = _useState8[0],\n        setEmptyFieldError = _useState8[1];\n\n  React.useEffect(() => {\n    localStorage.setItem('myCardsLocalStorage', JSON.stringify(cards));\n  }, [cards]);\n\n  const toggleCardPopUp = _ => {\n    if (emptyFieldError && popUp) {\n      setEmptyFieldError(false);\n      setNewCard({\n        front: '',\n        back: ''\n      });\n    }\n\n    showPopUp(!popUp);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"study-cards\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Study Cards\"), React.createElement(\"div\", {\n    className: \"new-btn-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"greeter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Create study cards to test yourself and master your knowledge! After creating a card, hover over it to reveal the answer.\"), React.createElement(\"button\", {\n    className: \"new-card-btn\",\n    onClick: toggleCardPopUp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"New Card\")), React.createElement(\"div\", {\n    className: \"cards-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, cards.length ? cards.map((card, index) => {\n    return React.createElement(Card, {\n      cards: cards,\n      setCardsList: setCardsList,\n      card: card,\n      key: index,\n      cardIndex: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    });\n  }) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"You haven't created any cards yet, click the 'New Card' button to start quizzing yourself!\")), popUp ? React.createElement(NewCardPopUp, {\n    card: card,\n    setNewCard: setNewCard,\n    cards: cards,\n    setEmptyFieldError: setEmptyFieldError,\n    emptyFieldError: emptyFieldError,\n    togglePopUp: toggleCardPopUp,\n    setCardsList: setCardsList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }) : null);\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dmendoza/Documents/react-projects/study-cards/src/App.js"],"names":["React","useState","Card","NewCardPopUp","App","myLocalStorageItems","JSON","parse","localStorage","getItem","cards","setCardsList","front","back","card","setNewCard","popUp","showPopUp","emptyFieldError","setEmptyFieldError","useEffect","setItem","stringify","toggleCardPopUp","_","length","map","index"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport Card from './components/Card';\nimport NewCardPopUp from './components/NewCardPopUp';\n\nfunction App() {\n  let myLocalStorageItems = JSON.parse(localStorage.getItem(\"myCardsLocalStorage\"));\n  const [cards, setCardsList] = useState(myLocalStorageItems || []);\n  const [card, setNewCard] = useState({\n    front: '',\n    back: ''\n  });\n  const [popUp, showPopUp] = useState(false);\n  const [emptyFieldError, setEmptyFieldError] = useState(false);\n\n  React.useEffect(() => {\n    localStorage.setItem('myCardsLocalStorage', JSON.stringify(cards));\n  }, [cards]);\n\n  const toggleCardPopUp = _ => {\n    if(emptyFieldError && popUp) {\n      setEmptyFieldError(false);\n      setNewCard({ front: '', back: ''});\n    }\n    showPopUp(!popUp);\n  }\n\n  return (\n    <div className=\"study-cards\">\n      <h1 className=\"title\">Study Cards</h1>\n      <div className=\"new-btn-container\">\n        <p className=\"greeter\">Create study cards to test yourself and master your knowledge! After creating a card, hover over it to reveal the answer.</p>\n        <button className=\"new-card-btn\" onClick={toggleCardPopUp}>New Card</button>\n      </div>\n      <div className=\"cards-container\">\n        { cards.length ? cards.map((card, index) => {\n          return <Card cards={cards} setCardsList={setCardsList} card={card} key={index} cardIndex={index} />;\n        }) : <div>You haven't created any cards yet, click the 'New Card' button to start quizzing yourself!</div>}\n      </div>\n      { popUp ? <NewCardPopUp\n        card={card}\n        setNewCard={setNewCard}\n        cards={cards}\n        setEmptyFieldError={setEmptyFieldError}\n        emptyFieldError={emptyFieldError}\n        togglePopUp={toggleCardPopUp}\n        setCardsList={setCardsList}\n        /> : null }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}