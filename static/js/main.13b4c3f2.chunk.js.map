{"version":3,"sources":["components/Card.js","components/NewCardPopUp.js","App.js","index.js"],"names":["Card","card","cardIndex","setCardsList","cards","className","front","onClick","_","filteredCards","filter","index","back","NewCardPopUp","togglePopUp","setNewCard","emptyFieldError","setEmptyFieldError","handleToggle","e","handleInputChange","preventDefault","cardCopy","Object","assign","target","name","value","onSubmit","cardsPile","htmlFor","type","onChange","id","App","myLocalStorageItems","JSON","parse","localStorage","getItem","useState","popUp","showPopUp","React","useEffect","setItem","stringify","toggleCardPopUp","length","map","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13b4c3f2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({card, cardIndex, setCardsList, cards}) => {\n\n  const handleRemoveCard = _ => {\n    const filteredCards = cards.filter( (card, index) => {\n      return cardIndex !== index;\n    })\n\n    setCardsList(filteredCards);\n  }\n  return (\n    <div className=\"card-container\">\n      <div className=\"card\">\n        <div className=\"card-front\">\n          <div className=\"card-text-front\">\n            {card.front}\n          </div>\n        </div>\n        <div className=\"card-back\">\n          <div className=\"card-text-back\">\n            <div className=\"remove-card-btn\" onClick={handleRemoveCard}>X</div>\n            {card.back}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default Card;\n","import React from 'react';\n\nconst NewCardPopUp = ({togglePopUp, cards, card, setNewCard, setCardsList, emptyFieldError, setEmptyFieldError}) => {\n\n  const handleToggle = e => {\n    togglePopUp();\n  }\n\n  const submitNewCard = e => {\n    e.preventDefault();\n    if(card.front && card.back) {\n      const cardsPile = [...cards, card];\n      setCardsList(cardsPile);\n      setNewCard({ front: '', back: ''});\n      handleToggle();\n      setEmptyFieldError(false);\n    } else {\n      setEmptyFieldError(true);\n    }\n  }\n\n  const handleInputChange = e => {\n    e.preventDefault();\n    const cardCopy = Object.assign({}, card);\n    const propertyName = e.target.name;\n    cardCopy[propertyName] = e.target.value;\n    setNewCard(cardCopy);\n  }\n\n  return (\n      <div>\n        <div className=\"popup-overlay\" onClick={handleToggle}>\n        </div>\n        <form className=\"new-card-component\" onSubmit={submitNewCard}>\n          <div className=\"close-popup\" onClick={handleToggle}>X</div>\n          <label htmlFor=\"card-front\">What would you like the front of the card to display?</label>\n          <input type=\"text\" name=\"front\" onChange={handleInputChange} id=\"card-front\" value={card.front} className=\"input-new-card\" />\n          <label htmlFor=\"card-front\">What would you like the back of the card to display?</label>\n          <textarea id=\"card-back\" onChange={handleInputChange} name=\"back\" value={card.back} className=\"input-new-card\"> </textarea>\n          <input type=\"submit\" value=\"Add Card\" className=\"add-card-btn\" />\n          {emptyFieldError ? <span className=\"error\">Please make sure to fill out both fields!</span> : ''}\n        </form>\n      </div>\n  )\n}\n\nexport default NewCardPopUp;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Card from './components/Card';\nimport NewCardPopUp from './components/NewCardPopUp';\n\nfunction App() {\n  let myLocalStorageItems = JSON.parse(localStorage.getItem(\"myCardsLocalStorage\"));\n  const [cards, setCardsList] = useState(myLocalStorageItems || []);\n  const [card, setNewCard] = useState({\n    front: '',\n    back: ''\n  });\n  const [popUp, showPopUp] = useState(false);\n  const [emptyFieldError, setEmptyFieldError] = useState(false);\n\n  React.useEffect(() => {\n    localStorage.setItem('myCardsLocalStorage', JSON.stringify(cards));\n  }, [cards]);\n\n  const toggleCardPopUp = _ => {\n    if(emptyFieldError && popUp) {\n      setEmptyFieldError(false);\n      setNewCard({ front: '', back: ''});\n    }\n    showPopUp(!popUp);\n  }\n\n  return (\n    <div className=\"study-cards\">\n      <h1 className=\"title\">Study Cards</h1>\n      <div className=\"new-btn-container\">\n        <p className=\"greeter\">Create study cards to test yourself and master your knowledge! After creating a card, hover over it to reveal the answer.</p>\n        <button className=\"new-card-btn\" onClick={toggleCardPopUp}>New Card</button>\n      </div>\n      <div className=\"cards-container\">\n        { cards.length ? cards.map((card, index) => {\n          return <Card cards={cards} setCardsList={setCardsList} card={card} key={index} cardIndex={index} />;\n        }) : <div>You haven't created any cards yet, click the 'New Card' button to start quizzing yourself!</div>}\n      </div>\n      { popUp ? <NewCardPopUp\n        card={card}\n        setNewCard={setNewCard}\n        cards={cards}\n        setEmptyFieldError={setEmptyFieldError}\n        emptyFieldError={emptyFieldError}\n        togglePopUp={toggleCardPopUp}\n        setCardsList={setCardsList}\n        /> : null }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}